// Standard set of Xcode configuration settings for all projects.
// #include in project-specific "common" configuration (which in turn should
// be #included in each of the configuration-specific project files.

//// Architectures

ADDITIONAL_SDKS =
SDKROOT = iphoneos
SUPPORTED_PLATFORMS = iphoneos iphonesimulator
VALID_ARCHS = armv6 armv7 armv7s
ARCHS = armv7 armv7s
ONLY_ACTIVE_ARCH = NO

//// Build options

// list of build variants to produce: e.g., normal debug profile
BUILD_VARIANTS = normal
//GCC_VERSION
DEBUG_INFORMATION_FORMAT = dwarf-with-dsym
GENERATE_PROFILING_CODE =
PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR = YES
RUN_CLANG_STATIC_ANALYZER = YES
SCAN_ALL_SOURCE_FILES_FOR_INCLUDES = NO
VALIDATE_PRODUCT = NO

//// Code Signing
CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Developer

//// Deployment
TARGETED_DEVICE_FAMILY = 1,2   // iPhone, iPad
IPHONEOS_DEPLOYMENT_TARGET = 5.1
DSTROOT = /tmp/$(PROJECT_NAME)/$(TARGET_NAME).dst

//// Linking
OTHER_LDFLAGS = -ObjC

//// Packaging
PRODUCT_NAME = $(TARGET_NAME)

//// Search Paths
ALWAYS_SEARCH_USER_PATHS = NO
USE_HEADERMAP = NO
FRAMEWORK_SEARCH_PATHS =
HEADER_SEARCH_PATHS = "$(BUILD_DIR)/include"
USER_HEADER_SEARCH_PATHS =
LIBRARY_SEARCH_PATHS =
REZ_SEARCH_PATHS =

// Apple recommends only appending to the default value for the list of
// exclusions, but that list changes with different versions, which could
// cause issues when building with different versions of Xcode. It is easy
// enough to expand this list as Xcode adds new elements in the future.
EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES = *.nib *.lproj *.framework *.gch (*) .DS_Store CVS .svn .git .hg *.xcodeproj *.xcode *.pbproj *.pbxproj
// The following is only used to override the above list in specific cases.
INCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES =


//// LLVM compiler -- Code generation

// Generate position-dependent code? (NO PIC -> non-position-independent)
GCC_DYNAMIC_NO_PIC = NO
// Symbols hidden by default?
GCC_SYMBOLS_PRIVATE_EXTERN = NO

//// LLVM compiler -- Language

// Stick with standard C/C++, unless you actually *need* some extension.
GCC_C_LANGUAGE_STANDARD = c99
CLANG_CXX_LANGUAGE_STANDARD = c++0x
CLANG_CXX_LIBRARY = libc++

// Disable Clang module support (experimental) for now.
CLANG_ENABLE_MODULES = NO

// Use Automatic Reference Counting (ARC) by default.
CLANG_ENABLE_OBJC_ARC = YES

// Prefix header and pre-compilation
GCC_PREFIX_HEADER =
GCC_PRECOMPILE_PREFIX_HEADER = NO

// Anything not defined in a named option can go in here.
OTHER_CFLAGS =
OTHER_CPLUSPLUSFLAGS =


//// LLVM compiler -- Warnings (turn pretty much everything on!)

GCC_WARN_INHIBIT_ALL_WARNINGS = NO
GCC_WARN_PEDANTIC = NO
GCC_TREAT_WARNINGS_AS_ERRORS = YES
WARNING_CFLAGS =
// TODO: add "-Wall -Wextra" to OTHER_CFLAGS or WARNING_CFLAGS, and cut out all this detail?

//// C
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
CLANG_WARN_EMPTY_BODY = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_SHADOW = YES
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
//GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE  // Xcode 5+ ?
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_PARAMETER = YES
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
//// C++
CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES
CLANG_WARN_CXX0X_EXTENSIONS = YES
//// Objective-C
CLANG_WARN__ARC_BRIDGE_CAST_NONARC = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = NO    // prefer auto-synthesis for new projects
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES
//CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR
CLANG_WARN_OBJC_RECEIVER_WEAK = YES
CLANG_WARN_OBJC_ROOT_CLASS = YES
//CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = NO   // too many false warnings
GCC_WARN_STRICT_SELECTOR_MATCH = YES
GCC_WARN_UNDECLARED_SELECTOR = YES

//// Static Analyzer
CLANG_ANALYZER_DEADCODE_DEADSTORES = YES
CLANG_ANALYZER_GCD = YES
CLANG_ANALYZER_MALLOC = YES
CLANG_ANALYZER_OBJC_ATSYNC = YES
CLANG_ANALYZER_OBJC_NSCFERROR = YES
CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES = YES
CLANG_ANALYZER_OBJC_CFNUMBER = YES
CLANG_ANALYZER_OBJC_COLLECTIONS = YES
CLANG_ANALYZER_OBJC_UNUSED_IVARS = YES
CLANG_ANALYZER_OBJC_SELF_INIT = YES
CLANG_ANALYZER_OBJC_RETAIN_COUNT = YES
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_KEYCHAIN_API = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK = YES

//// Xcode Core Data Model Compiler
MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS = YES
MOMC_NO_MAX_PROPERTY_COUNT_WARNINGS = YES
MOMC_NO_WARNINGS = YES
MOMC_SUPPRESS_INVERSE_TRANSIENT_ERROR = YES

//currently unset options:
//SYMROOT
//OBJROOT
//CONFIGURATION_BUILD_DIR
//CONFIGURATION_TEMP_DIR
//SHARED_PRECOMPS_DIR
//CODE_SIGN_ENTITLEMENTS
//CODE_SIGN_RESOURCE_RULES_PATH
//OTHER_CODE_SIGN_FLAGS
//STRIPFLAGS
//ALTERNATE_GROUP
//ALTERNATE_OWNER
//ALTERNATE_MODE
//ALTERNATE_PERMISSIONS_FILES
//DEPLOYMENT_LOCATION
//DEPLOYMENT_POSTPROCESSING
//INSTALL_GROUP
//INSTALL_OWNER
//INSTALL_MODE_FLAG
//DSTROOT
//INSTALL_PATH
//MACOSX_DEPLOYMENT_TARGET
//SKIP_INSTALL
//STRIP_INSTALLED_PRODUCT
//STRIP_STYLE
//TARGETED_DEVICE_FAMILY
//SEPARATE_STRIP
//IPHONEOS_DEPLOYMENT_TARGET
//MODULE_NAME
//MODULE_START
//MODULE_STOP
//MODULE_VERSION
//BUNDLE_LOADER
//DYLIB_COMPATIBILITY_VERSION
//DYLIB_CURRENT_VERSION
//DEAD_CODE_STRIPPING
//LINKER_DISPLAYS_MANGLED_NAMES
//LD_NO_PIE
//PRESERVE_DEAD_CODE_INITS_AND_TERMS
//LD_DYLIB_INSTALL_NAME
//EXPORTED_SYMBOLS_FILE
//INIT_ROUTINE
//LINK_WITH_STANDARD_LIBRARIES
//MACH_O_TYPE
//ORDER_FILE
//LD_MAP_FILE_PATH
//GENERATE_MASTER_OBJECT_FILE
//PRELINK_LIBS
//KEEP_PRIVATE_EXTERNS
//LD_RUNPATH_SEARCH_PATHS
//SEPARATE_SYMBOL_EDIT
//PRELINK_FLAGS
//SECTORDER_FLAGS
//UNEXPORTED_SYMBOLS_FILE
//WARNING_LDFLAGS
//LD_GENERATE_MAP_FILE
//COMPRESS_PNG_FILES
//APPLY_RULES_IN_COPY_FILES
//EXECUTABLE_EXTENSION
//EXECUTABLE_PREFIX
//INFOPLIST_EXPAND_BUILD_SETTINGS
//GENERATE_PKGINFO_FILE
//FRAMEWORK_VERSION
//INFOPLIST_FILE
//INFOPLIST_OTHER_PREPROCESSOR_FLAGS
//INFOPLIST_OUTPUT_FORMAT
//INFOPLIST_PREPROCESSOR_DEFINITIONS
//INFOPLIST_PREFIX_HEADER
//INFOPLIST_PREPROCESS
//COPYING_PRESERVES_HFS_DATA
//PRIVATE_HEADERS_FOLDER_PATH
//PLIST_FILE_OUTPUT_FORMAT
//PUBLIC_HEADERS_FOLDER_PATH
//STRINGS_FILE_OUTPUT_ENCODING
//CURRENT_PROJECT_VERSION
//VERSION_INFO_FILE
//VERSION_INFO_EXPORT_DECL
//VERSION_INFO_PREFIX
//VERSION_INFO_SUFFIX
//VERSIONING_SYSTEM
//VERSION_INFO_BUILDER
//GCC_FAST_OBJC_DISPATCH
//CLANG_X86_VECTOR_INSTRUCTIONS
//GCC_STRICT_ALIASING
//GCC_GENERATE_DEBUGGING_SYMBOLS
//GCC_GENERATE_TEST_COVERAGE_FILES
//GCC_INLINES_ARE_PRIVATE_EXTERN
//GCC_INSTRUMENT_PROGRAM_FLOW_ARCS
//GCC_ENABLE_KERNEL_DEVELOPMENT
//LLVM_LTO
//GCC_REUSE_STRINGS
//GCC_NO_COMMON_BLOCKS
//GCC_FAST_MATH
//GCC_THREADSAFE_STATICS
//GCC_SYMBOLS_PRIVATE_EXTERN
//GCC_UNROLL_LOOPS
//GCC_CHAR_IS_UNSIGNED_CHAR
//GCC_ENABLE_ASM_KEYWORD
//GCC_CW_ASM_SYNTAX
//GCC_INPUT_FILETYPE
//GCC_ENABLE_CPP_EXCEPTIONS
//GCC_ENABLE_CPP_RTTI
//GCC_LINK_WITH_DYNAMIC_LIBRARIES
//GCC_ENABLE_OBJC_EXCEPTIONS
//GCC_ENABLE_TRIGRAPHS
//GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS
//GCC_USE_INDIRECT_FUNCTION_CALLS
//GCC_USE_REGISTER_FUNCTION_CALLS
//CLANG_LINK_OBJC_RUNTIME
//GCC_INCREASE_PRECOMPILED_HEADER_SHARING
//GCC_ENABLE_BUILTIN_FUNCTIONS
//GCC_ENABLE_PASCAL_STRINGS
//GCC_SHORT_ENUMS
//GCC_USE_STANDARD_INCLUDE_SEARCHING
//GCC_PREPROCESSOR_DEFINITIONS
//GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS
//OTHER_OSACOMPILEFLAGS
//OSACOMPILE_EXECUTE_ONLY
